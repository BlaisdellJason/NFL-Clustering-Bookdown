[["index.html", "NFL Team Clusters Chapter 1 Project Overview", " NFL Team Clusters Jason Blaisdell 2023-01-13 Chapter 1 Project Overview Not all 13 win teams are created equally. The Vikings have proven that by having a negative point differential while winning 9 more games than they lost. Not all 1-6 teams are doomed to have the first pick in the draft as their only hope; Detroit rallied to win 8 of their last 10 games and only miss the playoffs on a tie breaker. In this project, I explored clustering the NFL’s 32 teams and the league average to see which teams were truly exceptional, whether they were good or bad. I began by collecting 58 statistics measuring team performance for the season from link Pro Football Reference. These statistics covered everything from wins and losses to passing first downs to fumbles forced. All of the statistic were adjusted so that a team’s value was the z-score to make the euclidean distance unbiased to statistics with a high absolute values. The statistics covered every element of the teams’ seasons so thoroughly that they became unwieldy, both in finding an optimal number of clusters and when trying to look at the common features of the teams, as there were just too many variables. To make the results more interpretable, I merged the variables into. 7 categories: Results Total Offense Passing Offence Rushing Offense Total Defense Passing Defense Rushing Defense With the new, reduced number of variables, I redid the clustering. In the end, I made 8 clusters, taking inspiration from the NFL’s 8 divisions. These clusters had 2-7 teams, with the largest cluster also having the league average. Jump to Chapter 5 if you just want to see the clusters and some findings! "],["getting-set-up.html", "Chapter 2 Getting Set Up 2.1 Loading Packages 2.2 Loading Data 2.3 Trimming and Renaming Data 2.4 Joining Data", " Chapter 2 Getting Set Up 2.1 Loading Packages As with every other r project, the first element is the packages I needed to complete the project. I needed tidyverse to perform data manipulation, ggplot to plot a couple of figures and the other packages to actually do the clustering. library(tidyverse) library(cluster) library(NbClust) library(factoextra) library(ggplot2) library(knitr) 2.2 Loading Data I downloaded the tables from Pro Football Reference as .txt files; however, they were still just rows of comma seperated values, so I was able to load them in using read.csv. There were three tables: Records: Teams’ records, margin of victory, and ratings Offense: Teams’ offensive performance, split out by totals, passing and rushing Defense: Teams’ defensive performance, split out by totals, passing and rushing records &lt;- read.csv(&quot;C:/Users/Jason Blaisdell/Documents/Grad School/Personal/NFL Clustering/Records.txt&quot;) offense &lt;- read.csv(&quot;C:/Users/Jason Blaisdell/Documents/Grad School/Personal/NFL Clustering/Offense.txt&quot;) defense &lt;- read.csv(&quot;C:/Users/Jason Blaisdell/Documents/Grad School/Personal/NFL Clustering/Defense.txt&quot;) 2.3 Trimming and Renaming Data Once I loaded the tables in, I removed information that was redundant across tables, such as total points scores, which was in the records table and the offence table. records &lt;- records %&gt;% select(c(Tm,W,L,T,W.L.,MoV,SoS,SRS,OSRS,DSRS)) %&gt;% mutate(&quot;Games Played&quot; = W+L) offense &lt;- offense %&gt;% select(c(Tm,PF,Yds,Ply,Y.P,TO,FL,X1stD,Cmp,Att,Yds.1,TD,Int,NY.A,X1stD.1,Att.1,Yds.2,TD.1,Y.A,X1stD.2,Pen,Yds.3,X1stPy,Sc.,TO.)) defense &lt;- defense %&gt;% select(c(Tm,PA,Yds,Ply,Y.P,TO,FL,X1stD,Cmp,Att,Yds.1,TD,Int,NY.A,X1stD.1,Att.1,Yds.2,TD.1,Y.A,X1stD.2,Pen,Yds.3,X1stPy,Sc.,TO.)) Finally, I renamed the statistics to more recognizable names, mostly for my own sanity as it isn’t instantly apparent that the tag “X1std.2” corresponds to rushing first downs. I also multiplied the values of some stats by negative one so that a bigger number was better for all offensive statistics and a smaller number was better for all defensive statistics. It doesn’t make sense to throw -13 interceptions, but once the statistics were scaled, this value simply became a z-score and if a team threw fewer interceptions than the league average, they will have a positive z-score. names(records)[names(records) == c(&#39;Tm&#39;,&#39;W&#39;,&#39;L&#39;,&#39;T&#39;,&#39;W.L.&#39;,&#39;MoV&#39;,&#39;SoS&#39;,&#39;SRS&#39;,&#39;OSRS&#39;,&#39;DSRS&#39;)] &lt;- c(&#39;Team&#39;,&#39;Wins&#39;,&#39;Losses&#39;,&#39;Ties&#39;,&#39;Win Percent&#39;,&#39;Average Margin of Victory&#39;,&#39;Strength of Schedule&#39;,&#39;Simple Rating System (SRS)&#39;,&#39;Offensive SRS&#39;,&#39;Defensive SRS&#39;) names(offense)[names(offense) == c(&#39;Tm&#39;,&#39;PF&#39;,&#39;Yds&#39;,&#39;Ply&#39;,&#39;Y.P&#39;,&#39;TO&#39;,&#39;FL&#39;,&#39;X1stD&#39;,&#39;Cmp&#39;,&#39;Att&#39;,&#39;Yds.1&#39;,&#39;TD&#39;,&#39;Int&#39;,&#39;NY.A&#39;,&#39;X1stD.1&#39;,&#39;Att.1&#39;,&#39;Yds.2&#39;,&#39;TD.1&#39;,&#39;Y.A&#39;,&#39;X1stD.2&#39;,&#39;Pen&#39;,&#39;Yds.3&#39;,&#39;X1stPy&#39;,&#39;Sc.&#39;,&#39;TO.&#39;)] &lt;- c(&#39;Team&#39;,&#39;Points For&#39;,&#39;Total Yards&#39;,&#39;Total Offensive Plays&#39;,&#39;Yards per Play&#39;,&#39;Total Turnovers&#39;,&#39;Fumbles&#39;,&#39;Total First Downs&#39;,&#39;Completions&#39;,&#39;Pass Attempts&#39;,&#39;Pass Yards&#39;,&#39;Passing Touchdowns&#39;,&#39;Interceptions Thrown&#39;,&#39;Net Yards per Pass Attempt&#39;,&#39;Passing First Downs&#39;,&#39;Rushing Attempts&#39;,&#39;Rushing yards&#39;,&#39;Rushing Touchdowns&#39;,&#39;Yards per Rush Attempt&#39;,&#39;Rushing First Downs&#39;,&#39;Penalties Committed&#39;,&#39;Penalty Yards&#39;,&#39;First Downs off Penalties&#39;,&#39;Scoring Percentage&#39;,&#39;Turnover Percentage&#39;) offense$`Total Turnovers` &lt;-offense$`Total Turnovers` * -1 offense$Fumbles &lt;-offense$Fumbles * -1 offense$`Interceptions Thrown` &lt;-offense$`Interceptions Thrown` * -1 offense$`Turnover Percentage` &lt;-offense$`Turnover Percentage` * -1 names(defense)[names(defense) == c(&#39;Tm&#39;,&#39;PA&#39;,&#39;Yds&#39;,&#39;Ply&#39;,&#39;Y.P&#39;,&#39;TO&#39;,&#39;FL&#39;,&#39;X1stD&#39;,&#39;Cmp&#39;,&#39;Att&#39;,&#39;Yds.1&#39;,&#39;TD&#39;,&#39;Int&#39;,&#39;NY.A&#39;,&#39;X1stD.1&#39;,&#39;Att.1&#39;,&#39;Yds.2&#39;,&#39;TD.1&#39;,&#39;Y.A&#39;,&#39;X1stD.2&#39;,&#39;Pen&#39;,&#39;Yds.3&#39;,&#39;X1stPy&#39;,&#39;Sc.&#39;,&#39;TO.&#39;)] &lt;- c(&#39;Team&#39;,&#39;Points Against&#39;,&#39;Total Yards Allowed&#39;,&#39;Total Defensive Plays&#39;,&#39;Yards Allowed per Play&#39;,&#39;Total Turnovers Created&#39;,&#39;Fumbles Forced&#39;,&#39;Opponents Total First Downs&#39;,&#39;Opponents Completions&#39;,&#39;Opponents Pass Attempts&#39;,&#39;Opponents Pass Yards&#39;,&#39;Opponents Passing Touchdowns&#39;,&#39;Opponents Interceptions Thrown&#39;,&#39;Opponents Net Yards per Pass Attempt&#39;,&#39;Opponents Passing First Downs&#39;,&#39;Opponents Rushing Attempts&#39;,&#39;Opponents Rushing yards&#39;,&#39;Opponents Rushing Touchdowns&#39;,&#39;Opponents Yards per Rush Attempt&#39;,&#39;Opponents Rushing First Downs&#39;,&#39;Defensive Penalties Committed&#39;,&#39;Defensive Penalty Yards&#39;,&#39;First Downs Given up off Penalties&#39;,&#39;Opponents Scoring Percentage&#39;,&#39;Opponent Turnover Percentage&#39;) defense$`Total Turnovers Created` &lt;- defense$`Total Turnovers Created` * -1 defense$`Fumbles Forced` &lt;- defense$`Fumbles Forced` * -1 defense$`Opponents Interceptions Thrown` &lt;- defense$`Opponents Interceptions Thrown` * -1 defense$`Opponent Turnover Percentage` &lt;- defense$`Opponent Turnover Percentage` * -1 2.4 Joining Data The “records” data frame did not have an average team, so I created one using the averages of all of the other teams. This was important because the other data frames had an average team and I wanted the league average to appear in one of my clusters. records_avg &lt;- summarise_all(records, mean) records_avg[1] &lt;- &#39;Avg Team&#39; records &lt;- rbind(records, records_avg) Finally, I was ready to join my three data frames into one. I used an inner join so I could check the number of observations in the new data frame to quickly see if I had any teams named incorrectly, as any team names that didn’t match would make the number of observations drop. The first time I ran this, it was a problem due to the fact that the team names in the records data frame included ’*’ or ‘+’ for teams that won their divisions or were wildcards respectively. I removed these in the original txt files and then re-ran all of the code. Two important data frames were created in this step: All_stats: Inner joined data frame with all of the original statistics for every team Scaled_stats: Scaled version of the joined data without the “Team” column (the teams are still in the same order) It is important to have the scaled data frame to prevent the clustering from being weighted more by large statistics, like passing yards, than by smaller statistics, like passing touchdowns. The “Team” column also needed to be removed to allow the clustering to run only on the team statistics. All_stats &lt;- inner_join(records, inner_join(offense, defense, by = &quot;Team&quot;), by = &quot;Team&quot;) Scaled_stats &lt;- All_stats Scaled_stats %&gt;% select_if(is.numeric) %&gt;% select(-`Scoring Percentage`, -`Turnover Percentage`, -`Opponent Turnover Percentage`, - `Opponent Turnover Percentage`, -`Win Percent`, -`Simple Rating System (SRS)`, -`Offensive SRS`, -`Defensive SRS`,-`Strength of Schedule`) %&gt;% mutate_at(vars(-`Games Played`), funs(./`Games Played`)) ## Wins Losses Ties Average Margin of Victory Games Played Points For Total Yards Total Offensive Plays ## 1 0.8235294 0.1764706 0.0000 0.458823529 17 28.05882 389.0588 66.11765 ## 2 0.7058824 0.2941176 0.0000 0.435294118 17 27.47059 354.9412 65.52941 ## 3 0.5625000 0.4375000 0.0625 -0.025000000 16 22.81250 354.7500 68.06250 ## 4 0.5000000 0.5000000 0.0625 -0.081250000 16 20.06250 350.9375 71.25000 ## 5 0.7647059 0.2352941 0.0000 -0.011764706 17 24.94118 361.4706 66.05882 ## 6 0.5294118 0.4705882 0.0000 0.088235294 17 26.64706 380.0000 64.23529 ## 7 0.4705882 0.5294118 0.0000 -0.005882353 17 21.76471 337.9412 61.82353 ## 8 0.1764706 0.8235294 0.0000 -0.476470588 17 19.17647 307.8235 58.41176 ## 9 0.4705882 0.5294118 0.0000 -0.152941176 17 18.41176 346.7059 68.17647 ## 10 0.4117647 0.5882353 0.0000 -0.094117647 17 20.41176 306.2353 57.41176 ## 11 0.4117647 0.5882353 0.0000 -0.052941176 17 19.41176 333.7647 59.70588 ## 12 0.4117647 0.5882353 0.0000 -0.070588235 17 21.47059 318.6471 59.47059 ## 13 0.7647059 0.2352941 0.0000 0.600000000 17 26.47059 365.6471 61.58824 ## 14 0.5294118 0.4705882 0.0000 0.023529412 17 23.94118 351.5294 61.41176 ## 15 0.2941176 0.7058824 0.0000 -0.264705882 17 18.05882 280.5294 58.88235 ## 16 0.2352941 0.7647059 0.0000 -0.376470588 17 20.00000 323.4706 67.29412 ## 17 0.8125000 0.1875000 0.0000 0.662500000 16 28.43750 397.5625 64.81250 ## 18 0.5294118 0.4705882 0.0000 -0.005882353 17 23.35294 364.5294 59.35294 ## 19 0.4705882 0.5294118 0.0000 0.058823529 17 21.41176 314.5882 59.17647 ## 20 0.4117647 0.5882353 0.0000 -0.070588235 17 17.41176 318.1765 63.17647 ## Yards per Play Total Turnovers Fumbles Total First Downs Completions Pass Attempts Pass Yards ## 1 0.3470588 -1.1176471 -0.5882353 22.64706 20.58824 31.52941 241.4706 ## 2 0.3176471 -1.3529412 -0.2941176 20.41176 20.88235 32.70588 219.7647 ## 3 0.3250000 -1.0000000 -0.6250000 22.00000 21.62500 32.50000 197.3125 ## 4 0.3062500 -1.4375000 -0.4375000 21.18750 21.50000 34.62500 217.0000 ## 5 0.3235294 -1.3529412 -0.4705882 22.47059 26.35294 39.52941 263.7647 ## 6 0.3470588 -0.8823529 -0.4705882 22.11765 22.52941 34.58824 251.8235 ## 7 0.3235294 -1.2941176 -0.5882353 19.64706 21.41176 33.11765 213.6471 ## 8 0.3117647 -1.4705882 -0.5882353 16.35294 13.11765 22.17647 130.5294 ## 9 0.3000000 -1.2941176 -0.7058824 20.35294 29.35294 44.17647 269.7647 ## 10 0.3117647 -1.2352941 -0.4705882 16.52941 15.70588 26.88235 176.2353 ## 11 0.3294118 -1.4705882 -0.6470588 17.94118 19.88235 30.11765 217.1765 ## 12 0.3176471 -1.2352941 -0.7058824 19.41176 15.11765 24.41176 158.7647 ## 13 0.3470588 -1.0000000 -0.4705882 20.41176 19.88235 30.11765 226.8235 ## 14 0.3352941 -1.3529412 -0.6470588 20.35294 23.47059 33.70588 231.4118 ## 15 0.2823529 -1.3529412 -0.4705882 17.23529 20.41176 31.23529 182.8235 ## 16 0.2823529 -1.4705882 -0.4705882 19.17647 25.47059 39.05882 213.2941 ## 17 0.3812500 -1.6875000 -0.8125000 22.93750 22.56250 35.87500 258.0625 ## 18 0.3588235 -1.2352941 -0.3529412 20.11765 21.64706 34.35294 265.3529 ## 19 0.3117647 -1.3529412 -0.5294118 16.94118 21.05882 31.76471 208.0000 ## 20 0.2941176 -1.3529412 -0.5294118 17.29412 21.00000 36.88235 219.0000 ## Passing Touchdowns Interceptions Thrown Net Yards per Pass Attempt Passing First Downs Rushing Attempts ## 1 1.4705882 -0.5294118 0.4176471 11.470588 32.00000 ## 2 1.6470588 -1.0588235 0.3764706 11.411765 31.23529 ## 3 1.0625000 -0.3750000 0.3437500 10.625000 32.50000 ## 4 1.5000000 -1.0000000 0.3625000 11.500000 33.62500 ## 5 1.7647059 -0.8823529 0.3647059 14.352941 23.76471 ## 6 1.7058824 -0.4117647 0.4117647 13.411765 28.23529 ## 7 1.5882353 -0.7058824 0.3588235 10.941176 26.82353 ## 8 1.1176471 -0.8823529 0.3000000 6.411765 32.82353 ## 9 1.5294118 -0.5882353 0.3470588 14.117647 22.70588 ## 10 0.9411765 -0.7647059 0.3588235 8.117647 28.41176 ## 11 1.4117647 -0.8235294 0.3941176 10.647059 27.35294 ## 12 1.0000000 -0.5294118 0.3529412 8.705882 32.88235 ## 13 1.7647059 -0.5294118 0.4176471 11.058824 29.64706 ## 14 1.7647059 -0.7058824 0.3764706 12.117647 25.00000 ## 15 0.9411765 -0.8823529 0.3117647 10.647059 24.17647 ## 16 1.0000000 -1.0000000 0.3000000 11.117647 25.52941 ## 17 2.1875000 -0.8750000 0.4250000 13.250000 26.87500 ## 18 1.7647059 -0.8823529 0.4294118 12.941176 22.94118 ## 19 1.1176471 -0.8235294 0.3588235 9.764706 25.00000 ## 20 0.8823529 -0.8235294 0.3294118 11.235294 23.82353 ## Rushing yards Rushing Touchdowns Yards per Rush Attempt Rushing First Downs Penalties Committed Penalty Yards ## 1 147.58824 1.8823529 0.2705882 9.470588 5.294118 40.11765 ## 2 135.17647 1.4117647 0.2529412 7.588235 6.117647 49.52941 ## 3 157.43750 1.3125000 0.3000000 9.375000 6.625000 51.68750 ## 4 133.93750 0.5625000 0.2500000 7.750000 5.750000 50.31250 ## 5 97.70588 1.0588235 0.2411765 5.470588 5.176471 40.52941 ## 6 128.17647 1.3529412 0.2647059 6.705882 5.294118 45.47059 ## 7 124.29412 0.7058824 0.2705882 6.823529 5.235294 43.94118 ## 8 177.29412 1.0588235 0.3176471 8.705882 4.705882 44.35294 ## 9 76.94118 0.2941176 0.2000000 4.647059 5.823529 46.64706 ## 10 130.00000 0.9411765 0.2705882 7.000000 6.117647 50.70588 ## 11 116.58824 0.7058824 0.2529412 6.058824 5.823529 49.47059 ## 12 159.88235 1.0000000 0.2882353 8.941176 4.000000 34.94118 ## 13 138.82353 1.1764706 0.2764706 7.764706 5.529412 42.94118 ## 14 120.11765 0.7058824 0.2823529 6.235294 6.235294 50.23529 ## 15 97.70588 0.8823529 0.2352941 5.235294 4.470588 38.52941 ## 16 110.17647 0.8823529 0.2529412 6.764706 6.941176 53.88235 ## 17 139.50000 0.9375000 0.3250000 8.000000 5.750000 44.31250 ## 18 99.17647 0.7058824 0.2529412 5.470588 6.529412 51.82353 ## 19 106.58824 0.7058824 0.2529412 5.764706 6.117647 49.47059 ## 20 99.17647 0.7647059 0.2470588 4.647059 5.352941 50.94118 ## First Downs off Penalties Points Against Total Yards Allowed Total Defensive Plays Yards Allowed per Play ## 1 1.705882 20.23529 301.4706 63.05882 0.2823529 ## 2 1.411765 20.11765 330.1765 64.76471 0.3000000 ## 3 2.000000 23.18750 380.5625 67.37500 0.3500000 ## 4 1.937500 21.43750 323.6250 62.37500 0.3250000 ## 5 2.647059 25.11765 388.7059 65.76471 0.3470588 ## 6 2.000000 25.11765 392.3529 63.29412 0.3647059 ## 7 1.882353 21.82353 336.5294 58.29412 0.3411765 ## 8 1.235294 27.23529 375.8824 61.35294 0.3588235 ## 9 1.588235 21.05882 324.2941 63.11765 0.3000000 ## 10 1.411765 22.00000 350.1765 64.88235 0.3176471 ## 11 1.235294 20.29412 314.8235 63.29412 0.2941176 ## 12 1.764706 22.70588 362.1176 63.64706 0.3352941 ## 13 1.588235 16.29412 300.5882 60.35294 0.2941176 ## 14 2.000000 23.58824 361.7059 65.70588 0.3235294 ## 15 1.352941 22.58824 341.0588 61.70588 0.3235294 ## 16 1.294118 26.41176 348.8824 63.23529 0.3235294 ## 17 1.687500 17.87500 319.1250 62.31250 0.3187500 ## 18 1.705882 23.47059 337.8235 63.88235 0.3117647 ## 19 1.411765 20.41176 322.0000 64.17647 0.2941176 ## 20 1.411765 18.58824 311.0588 64.29412 0.2823529 ## Total Turnovers Created Fumbles Forced Opponents Total First Downs Opponents Completions ## 1 -1.5882353 -0.5882353 19.11765 20.58824 ## 2 -1.9411765 -1.0000000 19.23529 20.29412 ## 3 -1.1875000 -0.8125000 23.12500 21.81250 ## 4 -1.1250000 -0.5625000 17.87500 19.25000 ## 5 -1.4705882 -0.5882353 21.11765 24.00000 ## 6 -1.2941176 -0.5882353 22.17647 20.76471 ## 7 -1.4117647 -0.4117647 18.88235 18.47059 ## 8 -1.3529412 -0.5294118 21.23529 19.00000 ## 9 -1.1764706 -0.5882353 18.47059 21.41176 ## 10 -1.0000000 -0.4117647 20.35294 22.52941 ## 11 -0.8235294 -0.4117647 18.76471 18.94118 ## 12 -1.0000000 -0.4117647 20.64706 21.88235 ## 13 -1.7647059 -0.5882353 17.11765 22.88235 ## 14 -1.4705882 -0.6470588 20.41176 20.17647 ## 15 -1.2941176 -0.3529412 19.47059 22.05882 ## 16 -1.1764706 -0.5294118 21.35294 24.35294 ## 17 -1.6875000 -0.6250000 19.56250 22.62500 ## 18 -0.8235294 -0.3529412 19.76471 24.47059 ## 19 -1.7647059 -0.6470588 18.47059 21.41176 ## 20 -0.9411765 -0.2352941 18.23529 20.41176 ## Opponents Pass Attempts Opponents Pass Yards Opponents Passing Touchdowns Opponents Interceptions Thrown ## 1 32.70588 179.8235 1.2941176 -1.0000000 ## 2 32.35294 200.8824 1.3529412 -0.9411765 ## 3 35.50000 227.3750 1.3125000 -0.3750000 ## 4 32.12500 203.2500 1.6250000 -0.5625000 ## 5 36.29412 265.5882 1.3529412 -0.8823529 ## 6 32.94118 245.8235 1.5294118 -0.7058824 ## 7 28.11765 197.0000 1.2941176 -1.0000000 ## 8 28.29412 218.5882 1.2941176 -0.8235294 ## 9 33.52941 203.5882 1.7058824 -0.5882353 ## 10 34.11765 227.5294 1.4705882 -0.5882353 ## 11 31.52941 184.3529 1.0000000 -0.4117647 ## 12 33.00000 231.8824 1.5294118 -0.5882353 ## 13 34.88235 222.8824 1.1764706 -1.1764706 ## 14 32.17647 211.4706 1.3529412 -0.8235294 ## 15 32.70588 226.0000 1.3529412 -0.9411765 ## 16 34.88235 230.2941 1.7058824 -0.6470588 ## 17 35.62500 214.5625 1.3125000 -1.0625000 ## 18 36.70588 234.8235 1.5882353 -0.4705882 ## 19 35.05882 216.5294 1.6470588 -1.1176471 ## 20 32.70588 189.4118 0.8823529 -0.7058824 ## Opponents Net Yards per Pass Attempt Opponents Passing First Downs Opponents Rushing Attempts ## 1 0.2882353 10.941176 26.23529 ## 2 0.3352941 10.235294 29.23529 ## 3 0.3750000 12.500000 29.31250 ## 4 0.3625000 9.687500 27.56250 ## 5 0.4058824 13.176471 27.23529 ## 6 0.4117647 12.294118 28.05882 ## 7 0.3823529 9.588235 28.17647 ## 8 0.4352941 10.823529 31.88235 ## 9 0.3294118 10.941176 26.94118 ## 10 0.3705882 11.411765 28.70588 ## 11 0.3176471 9.352941 28.94118 ## 12 0.4000000 11.764706 29.41176 ## 13 0.3470588 11.058824 22.88235 ## 14 0.3588235 11.058824 30.88235 ## 15 0.3823529 11.941176 26.76471 ## 16 0.3647059 12.823529 26.23529 ## 17 0.3500000 11.312500 24.18750 ## 18 0.3529412 11.764706 24.82353 ## 19 0.3352941 11.411765 25.94118 ## 20 0.3176471 9.764706 28.94118 ## Opponents Rushing yards Opponents Rushing Touchdowns Opponents Yards per Rush Attempt ## 1 121.64706 0.8823529 0.2705882 ## 2 129.29412 0.5294118 0.2588235 ## 3 153.18750 1.0000000 0.3250000 ## 4 120.37500 0.6250000 0.2750000 ## 5 123.11765 1.0588235 0.2647059 ## 6 146.52941 1.2941176 0.3058824 ## 7 139.52941 1.0588235 0.2941176 ## 8 157.29412 1.8235294 0.2882353 ## 9 120.70588 0.7058824 0.2647059 ## 10 122.64706 1.0000000 0.2529412 ## 11 130.47059 0.8235294 0.2647059 ## 12 130.23529 0.8823529 0.2588235 ## 13 77.70588 0.6470588 0.2000000 ## 14 150.23529 1.2352941 0.2882353 ## 15 115.05882 0.7058824 0.2529412 ## 16 118.58824 1.2352941 0.2647059 ## 17 104.56250 0.6250000 0.2687500 ## 18 103.00000 0.8823529 0.2411765 ## 19 105.47059 0.4117647 0.2411765 ## 20 121.64706 0.8235294 0.2470588 ## Opponents Rushing First Downs Defensive Penalties Committed Defensive Penalty Yards ## 1 6.764706 5.588235 46.94118 ## 2 7.000000 5.764706 50.05882 ## 3 8.375000 6.937500 51.18750 ## 4 6.375000 5.312500 44.18750 ## 5 6.647059 6.529412 54.47059 ## 6 7.941176 6.058824 48.11765 ## 7 7.588235 5.882353 53.88235 ## 8 8.882353 4.941176 38.35294 ## 9 6.058824 5.705882 50.76471 ## 10 7.352941 6.176471 50.94118 ## 11 7.176471 5.411765 46.94118 ## 12 8.000000 5.882353 47.29412 ## 13 4.529412 5.647059 48.94118 ## 14 7.647059 5.764706 48.11765 ## 15 6.235294 4.823529 40.64706 ## 16 7.294118 5.529412 44.52941 ## 17 6.437500 5.562500 47.12500 ## 18 5.764706 4.941176 47.00000 ## 19 5.294118 5.235294 41.11765 ## 20 6.882353 5.294118 41.58824 ## First Downs Given up off Penalties Opponents Scoring Percentage ## 1 1.4117647 1.905882 ## 2 2.0000000 1.970588 ## 3 2.2500000 2.487500 ## 4 1.8125000 1.968750 ## 5 1.2941176 2.417647 ## 6 1.9411765 2.423529 ## 7 1.7058824 2.247059 ## 8 1.5294118 2.458824 ## 9 1.4705882 1.941176 ## 10 1.5882353 2.011765 ## 11 2.2352941 2.047059 ## 12 0.8823529 2.558824 ## 13 1.5294118 1.511765 ## 14 1.7058824 2.188235 ## 15 1.2941176 2.411765 ## 16 1.2352941 2.447059 ## 17 1.8125000 1.937500 ## 18 2.2352941 2.205882 ## 19 1.7647059 1.794118 ## 20 1.5882353 1.900000 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 13 rows ] Scaled_stats[,colnames(All_stats)[colnames(All_stats)!=&#39;Team&#39;]] &lt;- scale(All_stats[,colnames(All_stats)[colnames(All_stats)!=&#39;Team&#39;]]) Scaled_stats &lt;- Scaled_stats[,colnames(Scaled_stats)[colnames(Scaled_stats)!=&#39;Team&#39;]] Now that I had created my data frame, I was ready to do some clustering "],["first-clustering.html", "Chapter 3 First Clustering 3.1 Optimizing the Number of Clusters 3.2 Creating Eight Clusters 3.3 Cluster Reveal 3.4 Interesting Findings 3.5 Flaws", " Chapter 3 First Clustering 3.1 Optimizing the Number of Clusters The number of clusters that should be used for a data set can depend on many factors. From the jump, I anticipated using 8 clusters to mirror the NFL’s 8 divisions; however, to be thorough, I wanted to try to find an optimal number of clusters naively. To do this, I used the fviz_nbclust() function, which creates clusterings with 1 to a specified maximum number of centers and measures the total distance from points to the center of their cluster. In many cases, the total distance will quickly drop off as more clusters are added, until most of the major separation has been split into the clusters, at which point the distance will drop off more slowly. This point where the rate of drop off changes drastically is called the elbow. I also set a seed so that the results of what I did would be reproducable for anyone who reads this later :) (you’re welcome) set.seed(123) fviz_nbclust(Scaled_stats, kmeans, method = &quot;wss&quot;,k.max = 10, nboot = 100) When I looked at the graph, I did not see a clear elbow. It could be argued that 4 could be the elbow, but I am not convinced. I was planning to do 8 clusters regardless, but the lack of a clear elbow sold that decision. 3.2 Creating Eight Clusters In order to create the 8 clusters I used the kmeans function and specified that I wanted 8 centers. I made the nstart value 100. The larger this number, the more times the algorithm will pick random starting points, so a larger number will produce the best results at the cost of time. With only 33 observations, I could make this number 10,000 and it would still run in less than 10 seconds; however, if you are clustering large datasets in the future, you will want to make this number smaller. Going up to 10,000 for the number of random starts would at best marginally improve the nstart of 100. Once the clusters are created, they need to be added to the data frame so that I can later sort by cluster. cluster &lt;- kmeans(Scaled_stats, centers = 8, nstart = 100) Scaled_Stats_Analysis &lt;- Scaled_stats Scaled_Stats_Analysis$cluster &lt;- cluster$cluster Scaled_Stats_Analysis$Team &lt;- All_stats$Team 3.3 Cluster Reveal for(i in 1:8){ teams &lt;- Scaled_Stats_Analysis %&gt;% filter(cluster == i) %&gt;% select(c(Team,)) cat(paste(&quot;- `Cluster &quot;, i, &quot;` \\n&quot;)) for(j in teams){ cat(paste(&quot; - `&quot;, j, &quot;` \\n&quot;)) } } Cluster 1 Arizona Cardinals Miami Dolphins Las Vegas Raiders Cluster 2 Indianapolis Colts Houston Texans Cluster 3 Washington Commanders Tampa Bay Buccaneers New Orleans Saints New York Jets Denver Broncos Cluster 4 New York Giants Green Bay Packers Seattle Seahawks Cleveland Browns Los Angeles Chargers Avg Team Cluster 5 Chicago Bears Atlanta Falcons Cluster 6 Carolina Panthers Los Angeles Rams New England Patriots Baltimore Ravens Pittsburgh Steelers Tennessee Titans Cluster 7 Minnesota Vikings Detroit Lions Jacksonville Jaguars Kansas City Chiefs Cluster 8 Philadelphia Eagles Dallas Cowboys San Francisco 49ers Buffalo Bills Cincinnati Bengals 3.4 Interesting Findings I want to discuss 3 interesting findings from these clusters. These findings are especially interesting to look at with the teams’ records to see how closely tied performing similarly in all of these categories corresponds to wins (the main metric fans are judging teams on). 3.4.1 Finding 1 Clusters 5 and 6 are both pairs of really bad teams. The Bears, Falcons, Colts, and Texans combined to go 17-29-2 with the tie coming in a game between the Colts and Texans. It is interesting to me that these teams formed two clusters and not one together with all of them. If I had used fewer clusters, like the elbow recommended that I do, these clusters may have combined to be only one. 3.4.2 Finding 2 The Vikings are in cluster 1with the Giants, Lions, Seahawks, and Jaguars, all of who won 9 games while the Vikings went 13-4. This is not surprising when you consider that the Vikings have the best record for any team ever with a negative point differential. All of these teams were slightly above average and I am a bit surprised that the “Avg Team” is not in this cluster 3.4.3 Finding 3 My favorite team, the Los Angeles Rams and my local team, the Carolina Panthers are both in cluster 2, alongside the “Avg Team”. This surprised me, as the Rams were hard to watch this year and I would have thought that they would be in a lesser cluster. The Panthers make more sense as a average team, but also looked below average when I watched their games. Of the other teams, the Patriots, Steelers, and Titans all make sense as average teams; however, it’s hard to imagine that the 10-7 Ravens and the 5-12 Broncos belong in the same cluster as one another, but that is what the data says. 3.5 Flaws This clustering is not ideal, because it is less interpretable as to what factors these teams are different from average in, so I made some adjustments and did a new clustering in the Second Clustering chapter "],["second-clustering.html", "Chapter 4 Second Clustering 4.1 Reducing to 7 Variables 4.2 Optimizing the Number of Clusters 4.3 Creating Eight Clusters 4.4 Cluster Reveal", " Chapter 4 Second Clustering 4.1 Reducing to 7 Variables In order to have fewer variables to look through to find what makes a cluster unique, I reduced the number of variables into the following more interpretable variables: Results Total Offense Passing Offence Rushing Offense Total Defense Passing Defense Rushing Defense To do this, I combined the variables that I thought fell into each category, by finding the average of that set of variables’ z-scores. Some variables didn’t fall neatly into one of the categories, especially those related to penalties, and those were left off. Obviously, a lot of the more minute variations between teams are lost here as some teams might be good in some of the included categories and bad at other, but that is the sacrifice we make for interpretability. I could have done PCA to capture as much of the information as possible with fewer variables; however, this would still result in a loss of what information that component is trying to convey. Note: As I am writing this I am considering, would there be an advantage to breaking the variables into the seven categories and then finding one principal component and take the value of that principal component for value for that category; however, I think that there would be issues with that component not necesarily having bigger = better, but I’m not sure. If you have taken the time to read this far, message me with what you think about that :) Here is also where it was important to negate the turnover variables earlier, so that a team with few interceptions has a positive z-score, helping their “Passing Offense”. Finally, I negated all of the defensive stats, so that a positive number is a team that is above average in that category and negative is below average. It was confusing for negatives to be good, so I got rid of that. Teams &lt;- All_stats$Team Results &lt;- rowMeans(subset(Scaled_stats,select = c(&#39;Win Percent&#39;,&#39;Average Margin of Victory&#39;,&#39;Strength of Schedule&#39;,&#39;Simple Rating System (SRS)&#39;,&#39;Offensive SRS&#39;,&#39;Defensive SRS&#39;))) `Total Offense` &lt;- rowMeans(subset(Scaled_stats,select = c(&#39;Win Percent&#39;,&#39;Average Margin of Victory&#39;,&#39;Strength of Schedule&#39;,&#39;Simple Rating System (SRS)&#39;,&#39;Offensive SRS&#39;,&#39;Defensive SRS&#39;,&#39;Scoring Percentage&#39;,&#39;Turnover Percentage&#39;,&#39;Total Turnovers&#39;))) `Passing Offense`&lt;- rowMeans(subset(Scaled_stats,select = c(&#39;Completions&#39;,&#39;Pass Attempts&#39;,&#39;Pass Yards&#39;,&#39;Passing Touchdowns&#39;,&#39;Interceptions Thrown&#39;,&#39;Net Yards per Pass Attempt&#39;,&#39;Passing First Downs&#39;))) `Rushing Offense` &lt;- rowMeans(subset(Scaled_stats,select = c(&#39;Rushing Attempts&#39;,&#39;Rushing yards&#39;,&#39;Rushing Touchdowns&#39;,&#39;Yards per Rush Attempt&#39;,&#39;Rushing First Downs&#39;,&#39;Fumbles&#39;))) `Total Defense` &lt;- -rowMeans(subset(Scaled_stats,select = c(&#39;Points Against&#39;,&#39;Total Yards Allowed&#39;,&#39;Total Defensive Plays&#39;,&#39;Yards Allowed per Play&#39;,&#39;Total Turnovers Created&#39;,&#39;Opponents Total First Downs&#39;,&#39;Opponents Scoring Percentage&#39;,&#39;Opponent Turnover Percentage&#39;))) `Passing Defense` &lt;- -rowMeans(subset(Scaled_stats, select = c(&#39;Opponents Completions&#39;,&#39;Opponents Pass Attempts&#39;,&#39;Opponents Pass Yards&#39;,&#39;Opponents Passing Touchdowns&#39;,&#39;Opponents Interceptions Thrown&#39;,&#39;Opponents Net Yards per Pass Attempt&#39;,&#39;Opponents Passing First Downs&#39;))) `Rushing Defense` &lt;- -rowMeans(subset(Scaled_stats, select = c(&#39;Opponents Rushing Attempts&#39;,&#39;Opponents Rushing yards&#39;,&#39;Opponents Rushing Touchdowns&#39;,&#39;Opponents Yards per Rush Attempt&#39;,&#39;Opponents Rushing First Downs&#39;, &#39;Fumbles Forced&#39;))) Scaled_Combined_Stats &lt;- data.frame(Results, `Total Offense`, `Passing Offense`, `Rushing Offense`, `Total Defense`, `Passing Defense`, `Rushing Defense`) 4.2 Optimizing the Number of Clusters Once again, I used “fviz_nbclust()” to find the ideal number of clusters, and once again, I ignored the output. In this case, there was a more clear elbow at 4 or 5 clusters, but I’m going to ignore that and move forward. I think that for this project, 8 clusters just makes the most sense, because the NFL has 8 divisions. If you think that I should have used a different number, go ahead and run it with that many clusters. fviz_nbclust(Scaled_Combined_Stats, kmeans, method = &quot;wss&quot;,k.max = 10, nboot = 100) 4.3 Creating Eight Clusters If we use the elbow method to determine the optimal number of clusters, we would most likely choose 4 clusters as the optimal number; however, since this is an analysis of the NFL, I want to instead use 8 clusters, like the 8 divisions in the NFL. cluster2 &lt;- kmeans(Scaled_Combined_Stats, centers = 8, nstart = 1000) Scaled_Combined_Stats_Analysis &lt;- Scaled_Combined_Stats Scaled_Combined_Stats_Analysis$cluster &lt;- cluster2$cluster Scaled_Combined_Stats_Analysis$Team &lt;- All_stats$Team 4.4 Cluster Reveal centers &lt;- round(cluster2$centers, digits = 2) for(i in 1:8){ teams &lt;- Scaled_Combined_Stats_Analysis %&gt;% filter(cluster == i) %&gt;% select(c(Team,)) cat(paste(&quot;- `Cluster &quot;, i, &quot; \\n&quot;, &quot; Record: &quot;,centers[i,1],&quot; Total Offense: &quot;,centers[i,2],&quot; Passing Offense: &quot;,centers[i,3],&quot; Rushing Offense: &quot;,centers[i,4],&quot; Total Defense: &quot;,centers[i,5],&quot; Passing Defense: &quot;,centers[i,6],&quot; Rushing Defense: &quot;,centers[i,7] ,&quot;` \\n&quot;)) for(j in teams){ cat(paste(&quot; - `&quot;, j, &quot;` \\n&quot;)) } } Cluster 1 Record: -0.21 Total Offense: -0.03 Passing Offense: 1.18 Rushing Offense: -1.27 Total Defense: 0.17 Passing Defense: 0.3 Rushing Defense: -0.15 Tampa Bay Buccaneers Los Angeles Chargers Cluster 2 Record: -0.5 Total Offense: -0.22 Passing Offense: -0.79 Rushing Offense: 0.75 Total Defense: -0.83 Passing Defense: -0.4 Rushing Defense: -0.67 New York Giants Chicago Bears Carolina Panthers Atlanta Falcons Las Vegas Raiders Cluster 3 Record: -0.74 Total Offense: -0.69 Passing Offense: -0.56 Rushing Offense: -0.31 Total Defense: -0.21 Passing Defense: -0.6 Rushing Defense: 0.37 Los Angeles Rams Arizona Cardinals Tennessee Titans Denver Broncos Cluster 4 Record: 0.3 Total Offense: 0.18 Passing Offense: -0.48 Rushing Offense: 0.31 Total Defense: 0.62 Passing Defense: 0.14 Rushing Defense: 0.71 Washington Commanders New England Patriots Baltimore Ravens Pittsburgh Steelers Cluster 5 Record: -1.39 Total Offense: -1.59 Passing Offense: -0.62 Rushing Offense: -1.05 Total Defense: -0.49 Passing Defense: 0.32 Rushing Defense: -0.91 Indianapolis Colts Houston Texans Cluster 6 Record: 0.37 Total Offense: 0.42 Passing Offense: 0.96 Rushing Offense: -0.17 Total Defense: -0.52 Passing Defense: -0.81 Rushing Defense: 0.09 Minnesota Vikings Detroit Lions Miami Dolphins Jacksonville Jaguars Kansas City Chiefs Cluster 7 Record: 1.12 Total Offense: 0.94 Passing Offense: 0.44 Rushing Offense: 0.48 Total Defense: 1.11 Passing Defense: 0.56 Rushing Defense: 0.75 Philadelphia Eagles Dallas Cowboys San Francisco 49ers Buffalo Bills Cincinnati Bengals Cluster 8 Record: 0.01 Total Offense: -0.06 Passing Offense: -0.01 Rushing Offense: -0.11 Total Defense: 0.03 Passing Defense: 0.64 Rushing Defense: -0.5 Green Bay Packers New Orleans Saints Seattle Seahawks New York Jets Cleveland Browns Avg Team Interesting findings from this section are their own chapter. You’re almost there :) "],["interesting-findings-1.html", "Chapter 5 Interesting Findings 5.1 Three and a Half Disappointments 5.2 There Are Five Complete Teams 5.3 NFC North Qbs are Underrated", " Chapter 5 Interesting Findings Just as a recap, these are the clusters: Cluster 1 : Run the d@rn ball Record: -0.21 Total Offense: -0.03 Passing Offense: 1.18 Rushing Offense: -1.27 Total Defense: 0.17 Passing Defense: 0.3 Rushing Defense: -0.15 Tampa Bay Buccaneers Los Angeles Chargers Cluster 2 : Run and Done Record: -0.5 Total Offense: -0.22 Passing Offense: -0.79 Rushing Offense: 0.75 Total Defense: -0.83 Passing Defense: -0.4 Rushing Defense: -0.67 New York Giants Chicago Bears Carolina Panthers Atlanta Falcons Las Vegas Raiders Cluster 3 : I'm not mad, just disappointed Record: -0.74 Total Offense: -0.69 Passing Offense: -0.56 Rushing Offense: -0.31 Total Defense: -0.21 Passing Defense: -0.6 Rushing Defense: 0.37 Los Angeles Rams Arizona Cardinals Tennessee Titans Denver Broncos Cluster 4 : Defense over all Record: 0.3 Total Offense: 0.18 Passing Offense: -0.48 Rushing Offense: 0.31 Total Defense: 0.62 Passing Defense: 0.14 Rushing Defense: 0.71 Washington Commanders New England Patriots Baltimore Ravens Pittsburgh Steelers Cluster 5 : Tank bowl Record: -1.39 Total Offense: -1.59 Passing Offense: -0.62 Rushing Offense: -1.05 Total Defense: -0.49 Passing Defense: 0.32 Rushing Defense: -0.91 Indianapolis Colts Houston Texans Cluster 6 : Airial Attack Record: 0.37 Total Offense: 0.42 Passing Offense: 0.96 Rushing Offense: -0.17 Total Defense: -0.52 Passing Defense: -0.81 Rushing Defense: 0.09 Minnesota Vikings Detroit Lions Miami Dolphins Jacksonville Jaguars Kansas City Chiefs Cluster 7 : Complete teams Record: 1.12 Total Offense: 0.94 Passing Offense: 0.44 Rushing Offense: 0.48 Total Defense: 1.11 Passing Defense: 0.56 Rushing Defense: 0.75 Philadelphia Eagles Dallas Cowboys San Francisco 49ers Buffalo Bills Cincinnati Bengals Cluster 8 : Average, just average Record: 0.01 Total Offense: -0.06 Passing Offense: -0.01 Rushing Offense: -0.11 Total Defense: 0.03 Passing Defense: 0.64 Rushing Defense: -0.5 Green Bay Packers New Orleans Saints Seattle Seahawks New York Jets Cleveland Browns Avg Team 5.1 Three and a Half Disappointments There is little aregument that the 4 most disappointing teams this year were the defending Super Bowl Champion Rams, big spending Broncos, promising Cardinals, and Oakland Las Vegas Raiders. Three of the four of these teams found themselves in the same cluster, with the Cardinals, Rams, and Broncos joining Tennessee in the cluster with the second worst record statistic. The Titans were also disappointing; however, I don’t think they had the same expectations as the other three; expected only to win the anemic AFC South. The Rams and Broncos were considered potential Super Bowl contenders and the Cardinals were expected to make the playoffs at minimum. One year sure can change a lot. 5.2 There Are Five Complete Teams In cluster 5, we find 5 complete teams: the Eagles, Cowboys, 49ers, Bills and Bengals. These teams are above average in every category and are currently the 2nd to 6th most likely to win the Super Bowl according to betting odds. The team with the best odds is Kansas City and they have the best quarterback in the league. Kansas City sitting as the betting favorite is a testament to the greatness of Patrick Mahomes. Back to these 5 teams, they are talented across the board and definitely belong in a cluster together based on how they look on the screen. I can’t wait to see matchups between these teams in the playoffs. I personally think that the only teams that can beat anyone in this group are the other teams in this group and Kansas City. 5.3 NFC North Qbs are Underrated If we look at cluster 6, these teams have bad defenses and slightly below average rush attacks, yet are still winning. This cluster’s teams are carried by their passing games and only their passing games. Let’s look at the three quarterbacks who aren’t from the NFC North; Patrick Mahomes should win the MVP this year and broke the record for most total yards in a season, Tua Tagovailoa was an MVP candidate before he suffered multiple concussions and leads the league in passer rating among qualifying quarterbacks, and finally Trevor Lawrence has had a breakout sophomore season and is heralded as a future superstar who may have already arrived. This leaves us with only Jared Goff and Kirk Cousins. Two years ago, Goff was traded with miltiple first round picks for an aging Matthew Stafford (we won the SB tho, so worth), and many were saying that he was overpaid and couldn’t be a great quarterback in the league. This year, he led the Lions breakout offense and finished 7th in passer rating with 29 touchdowns to only 7 interceptions. Jared Goff has really developed on the Lions. Only a coulple of years ago, he was in the Super Bowl and this season proves that he can be a very good player without Sean McVay. Kirk Cousins has been questioned as a franchise quarterback and while he finished below average in passer rating, the offense, and team, went as he did with him finishing fourth in yards and fifth in touchdowns, while being the second most sacked quarterback in the league. I don’t think Kirk is a star, but he earned the all-star appearance this year and is at worst a solid franchise quarterback in the NFL. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
